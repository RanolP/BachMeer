let VERSION = '0.1.0-SNAPSHOT';

let BORDER_HEAD = '┌─────────────────────────────────────────────────────────────────────';
let BORDER_ = '┌─────────────────────────────────────────────────────────────────────';
let BORDER_TAIL = '└─────────────────────────────────────────────────────────────────────';

let mut java = 'java';
let bit = 
  if exists(env('%ProgramFiles(x86)')) {
    64
  } else {
    32
  };
let mut jarFile = null;
let mut ram = null;
let mut javaPath = null;
let mut javaArgs = null;


clear();
println(`x${bit} ${current.directory}`);

if !exists('./raise-setting.txt') {
    println('WARN  Setting file not found. create a new one.');
    save();
} else {
    println('INFO  Setting file found.');

    let mut index = 0;
    for line in readLines('raise-setting.txt') {
        if !line {
            continue;
        }
        match index {
            0 -> {
			    println('INFO  Jar setting found.');
                jarFile = line;
            }
            1 -> {
                if line.isNumeric() {
				    println('INFO  RAM setting found.');
                    ram = line.toInt();
                } else {
                    println(`WARN  RAM value '${line}' is not a number. resetting to default value.`);
                }
            }
            2 -> {
			    println('INFO  Java setting found.');
                javaPath = line;
            }
            3 -> {
			    println('INFO  Java argument setting found.');
                javaArgs = line;
            }
        }
        index++;
    }
}

println();

setTitle(`RAISE v${VERSION}`);
clear();
println(`INFO  Ranol's Advanced Interactive Server Executor : v${VERSION}`);

if !exists(jarFile) (
  if jarFile (
    println('WARN  Jar file is not valid. Select a new one.');
  ) else (
    println('INFO  Jar file not selected. Select a new one.');
  )
  configureJar();
)
println(`INFO  Jar file  : ${jarFile}`);

if !ram (
  println('INFO  RAM not configured.');
  configureRam();
)
println(`INFO  RAM       : ${ram} GB`);

if !exists(javaPath) (
  println('INFO  Java not configured.');
  configureJava();
)
println(`INFO  Java      : ${javaPath}`);

if javaArgs (
  println(`INFO  Java Args : ${javaArgs}`);
)
menu();

func configureJar() {
    println(BORDER_HEAD);
    println('│ Select one of following jar files.');
    println(BORDER_TAIL);
    for file in listFiles().filter(\file -> file.extension == 'jar') {
        println(`│ ${file.name}`);
    }

    while(true) {
        let name = input('Type a name of file > ');

        if !exists(`./$name`) {
	        println('WARN  Please type existing file.');
        } else if name[:4] != .jar {
            println('WARN  Please type a jar file.');
        } else {
            println('INFO  Jar file selected.');
            println('INFO  Save the setting...');

            jarFile = name;

            save();

            break;
        }
    }
}

func configureRam() {
    println(BORDER_HEAD);
    println('│ Configure RAM');
    println(BORDER_TAIL);

    let physicalRam = static if batch {
        (raw('wmic computersystem GET TotalPhysicalMemory') as Int).split('\n')[1]
    } else {
        None
    }

    if physicalRam {
        println(`│ Your Physical RAM : About ${physical_ram} GB`);
    } else {
        println(`│ Your Physical RAM : Unknown`);
    }

    println('│')
    if physicalRam {
	    println(`│ Enter that you want to use physical RAM less than ${physical_ram} GB`);
    } else {
        println(' Enter that you want to use physical RAM.');
    }

    while(true) {
        let ramInput = input('Type a name of file > ').filter(\it -> it.isNumeric())?.map(\it -> it.toInt());

        if !ramInput {
            println('WARN  Please type a numeric characters.');
        } else physicalRam && ramInput > physicalRam {
            println(`WARN  Please type a valid value, maximum : ${physicalRam} GB`);
        } else if ramInput <= 0 {
            println(`WARN  Please type a valid value, minimum : 1 GB`);
        } else {
            ram = ramInput;
            println('INFO  RAM configured.');
            save();
        }
    }
}

func configureJava() {
    println(BORDER_HEAD);
    println(BORDER_TAIL);
}
:ConfigureJava
setlocal EnableDelayedExpansion
echo ┌─────────────────────────────────────────────────────────────────────
echo │ Configure Java
echo ├─────────────────────────────────────────────────────────────────────
echo │ 1. Search Java in default directory
if %bit% == "32" (
  echo │ (in `%ProgramFiles%`)
) else (
  echo │ (in `%ProgramFiles%` and `%ProgramFiles(x86)%`)
)
echo │ 
echo │ 2. Use my input as path of Java
echo └─────────────────────────────────────────────────────────────────────
call :Loop-ConfigureJava
endlocal

:Loop-ConfigureJava
setlocal EnableDelayedExpansion
set /p "selection=Select > "
if %selection% == 1 (
  call :ConfigureJava-Default
) else (
  if %selection% == 2 (
    call :ConfigureJava-Specific
  ) else (
    echo Please select 1 or 2
    goto Loop-ConfigureJava
  )
)
endlocal

:ConfigureJava-Default
if not exist "%ProgramFiles%\Java" if not exist "%ProgramFiles(x86)%\Java" (
  echo Java not installed
  echo Please install Java via choose one of following links
  echo.
  echo.
  echo # Oracle JRE 10.0.2
  echo http://www.oracle.com/technetwork/java/javase/downloads/jre10-downloads-4417026.html
  echo.
  echo # Oracle JDK 10.0.2
  echo http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html
  echo.
  echo # Oracle JRE 8u181
  echo http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html
  echo.
  echo # Oracle JDK 8u181
  echo http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
  echo.
  echo # Open JDK 10
  echo http://jdk.java.net/java-se-ri/10
  echo.
  echo # Open JDK 9
  echo http://jdk.java.net/java-se-ri/9
  echo.
  echo # Open JDK 8
  echo http://jdk.java.net/java-se-ri/8
  echo.
  echo # Open JDK 7
  echo http://jdk.java.net/java-se-ri/7
  goto :eof
)
echo ┌─────────────────────────────────────────────────────────────────────
echo │ Found Java executables
echo ├─────────────────────────────────────────────────────────────────────
set x64_found=0
set x86_found=0
set /a length64=0
set /a length86=0
if exist "%ProgramFiles%\Java" (
  set x64_found=1
  if %bit% == 64 (
    echo │ x64
  ) else (
    echo │ x32
  )
  echo ├┬────────────────────────────────────────────────────────────────────
  pushd "%ProgramFiles%\Java"
  for /f "tokens=*" %%a in ('dir /B') do (
    echo ││ %%a
    set "java64[!length64!]=%%a"
    set /a "length64+=1"
  )
  popd
)
if exist "%ProgramFiles(x86)%\Java" (
  set x86_found=1
  if %x64_found% NEQ 0 (
    echo ├┴────────────────────────────────────────────────────────────────────
  )
  echo │ x86
  echo ├┬────────────────────────────────────────────────────────────────────
  pushd "%ProgramFiles(x86)%\Java"
  for /f "tokens=*" %%a in ('dir /B') do (
    echo ││ %%a
    set "java86[!length86!]=%%a"
    set /a "length86+=1"
  )
  popd
)
echo └┴────────────────────────────────────────────────────────────────────
call :Loop-ConfigureJava-Default

:Loop-ConfigureJava-Default
set /p "selection=Select java version > "
set /a ok=0
for /l %%i in (0, 1, !length64!) do (
  if %ok% == 0 if "%selection%" == "!java64[%%i]!" (
    echo Java set.
    set "java_path=%ProgramFiles%\Java\%selection%\bin\java.exe"
    call :Save
    set /a ok=1
  )
)
for /l %%i in (0, 1, !length86!) do (
  if %ok% == 0 if "%selection%" == "!java86[%%i]!" (
    echo Java set.
    set "java_path=%ProgramFiles(x86)%\Java\%selection%\bin\java.exe"
    call :Save
    set /a ok=1
  )
)
if %ok% == 0 (
  echo Invalid java version
  goto Loop-ConfigureJava-Default
)

:ConfigureJava-Specific
echo ┌─────────────────────────────────────────────────────────────────────
echo │ Enter your custom java path (maybe it can break your server)
echo └─────────────────────────────────────────────────────────────────────
set /p "java_path=Enter > "
call :Save

:Menu
echo.
echo ┌─────────────────────────────────────────────────────────────────────
echo │ RAISE %VERSION%
echo ├─────────────────────────────────────────────────────────────────────
echo │ 
echo │ 1. Start Server
echo │ 
echo │ 2. Configure Jar
echo │ 
echo │ 3. Configure RAM
echo │ 
echo │ 4. Configure Java
echo │ 
echo │ 5. Configure Java Arguments
echo │ 
echo │ 6. Exit
echo │ 
echo └─────────────────────────────────────────────────────────────────────

:Loop-Menu
set /p "selection=Select > "
if %selection% == 1 (
  cls
  call :StartServer
) else (
  if %selection% == 2 (
    cls
    call :ConfigureJar
  ) else (
    if %selection% == 3 (
      cls
      call :ConfigureRam
    ) else (
      if %selection% == 4 (
        cls
        call :ConfigureJava
      ) else (
        if %selection% == 5 (
          cls
          call :ConfigureJavaArgument
        ) else (
          if %selection% == 6 (
            goto :eof
          ) else (
            echo Please select one of 1, 2, 3, 4, 5, and 6
            goto Loop-Menu
          )
        )
      )
    )
  )
)
goto Loop-Menu

:ConfigureJavaArgument
echo ┌─────────────────────────────────────────────────────────────────────
echo │ Enter your custom java argument (maybe it can break your server)
echo └─────────────────────────────────────────────────────────────────────
set /p "java_args=Enter > "
call :Save

:StartServer
echo INFO  Start the server
"!java_path!" !java_args! -Xmx!ram!G -jar !jar_file!
cls

:Save
(
	::   Jar File
	echo.!jar_file!
	::   RAM (GB)
	echo.!ram!
	::   Java Path
	echo.!java_path!
	::   Java Argument
	echo.!java_args!
) > raise-setting.txt
